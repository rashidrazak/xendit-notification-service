# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: 
  name: ${env:PROJECT_NAME}

frameworkVersion: ">=1.60.0 <2.0.0"

package:
  individually: true
  exclude:
    - .git/** 
    - .gitignore 
    - tests/** 
    - coverage/** 
    - .DS_Store 
    - .eslintrc.json 
    - package-lock.json 
    - package.json 

plugins:
  - serverless-dotenv-plugin
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "ap-southeast-1"}
  stackName: ${env:STACK_NAME}
  profile: ${opt:profile, "personal"}
  memorySize: ${env:MEMORY_SIZE, 256}
  deploymentBucket: ${self:custom.deploymentBucket}
  environment:
    VERSION: 0.1.0
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/${self:custom.ddbCounterTable}
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/${self:custom.ddbCounterTable}/*
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/${self:custom.ddbNotificationTable}
        - arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/${self:custom.ddbNotificationTable}/*
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - arn:aws:logs:${self:provider.region}:${self:custom.accountId}:*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        # - arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:*
        - 'arn:aws:lambda:${self:provider.region}:*:function:*'
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:custom.contentBucket}*

custom:
  account:
    prod: ${env:AWS_ACCOUNT_ID_PROD}
    preprod: ${env:AWS_ACCOUNT_ID_PREPROD}
    staging: ${env:AWS_ACCOUNT_ID_STAGING}
    dev: ${env:AWS_ACCOUNT_ID_DEV}
  artifact:
    prod: com.biborn.${self:provider.stage}-${env:PROJECT_NAME}-deployment
    preprod: com.biborn.${self:provider.stage}-${env:PROJECT_NAME}-deployment
    staging: com.biborn.${self:provider.stage}-${env:PROJECT_NAME}-deployment
    dev: com.biborn.serverless
  bucket:
    prod: com.biborn.prod-content
    preprod: com.biborn.preprod-content
    staging: com.biborn.staging-content
    dev: com.biborn.serverless
  # esEndpoint:
  #   prod:
  #   preprod:
  #   staging:
  #   dev:

  accountId: ${self:custom.account.${opt:stage, self:provider.stage}}
  contentBucket: ${self:custom.bucket.${opt:stage, self:provider.stage}}
  deploymentBucket: ${self:custom.artifact.${opt:stage, self:provider.stage}}
  bibornESDomainIndex: biborn-es-domain-${opt:stage, self:provider.stage}

  serviceName: Xendit

  ddbCounterTable: ${self:custom.serviceName}-${self:provider.stage}-CounterTable
  ddbNotificationTable: ${self:custom.serviceName}-${self:provider.stage}-NotificationTable

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createVerificationToken:
    handler: src/apis/verification-token.create
    events:
      - http:
          path: api/v1/verification_token
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
